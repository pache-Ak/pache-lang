%{ /* -*- C++ -*- */
//#include <cstdlib>
//#include <string>

// 因为 Flex 会用到 Bison 中关于 token 的定义
// 所以需要 include Bison 生成的头文件
#include "parser.tab.hh"
#include "driver.h"
%}

%option noyywrap nounput noinput batch debug
/* 空白符和注释 */
WHITESPACE            [ \t\r\n]+
NEW_LINE              [\n]
HORIZONTAL_WHITESPACE [ \t\r]*
one_line_comment      \/\/[^\n]*\n


MUTABLE                "mut"
VOLATILE             "volatile"

MAIN                 "main"
LET                  "let"
CLASS                "class"
IF                   "if"
ELSE                 "else"

LOOP                 "loop"
BREAK                "break"
CONTINUE             "continue"
ASSIGN               ":="

/* 标识符 */
IDENTIFIER    [a-zA-Z_][a-zA-Z0-9_]*
operand_start         [(A-Za-z0-9_\"]

%x BINARY
%x OCTAL
%x DECIMAL
%x HEXADECIMAL
%s LINE_END


/* 整数字面量 */

LOWERCASE_BINARY_PREFIX 0b
UPPERCASE_BINARY_PREFIX 0B
LOWERCASE_HEXADECIMAL_PREFIX 0x
UPPERCASE_HEXADECIMAL_PREFIX 0X

ZERO              0
%{
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
%}
%%
%{
  // A handy shortcut to the location held by the driver.
  pache::location loc;
  // Code run each time yylex is called.
  loc.step ();
%}
<INITIAL>{WHITESPACE} { return pache::parser::make_WHITESPACE(loc); }
<LINE_END>{NEW_LINE} { 
  BEGIN(INITIAL);
  return pache::parser::make_NEW_LINE(loc);
}
<LINE_END>{HORIZONTAL_WHITESPACE} { 
//  BEGIN(INITIAL);  
  return pache::parser::make_HORIZONTAL_WHITESPACE(loc);
}
{MAIN}          { return pache::parser::make_MAIN(loc); }
{LET}           { return pache::parser::make_LET(loc); }
{IF}            { return pache::parser::make_IF(loc); }
{ELSE}          { return pache::parser::make_ELSE(loc); }

{ASSIGN}        { return pache::parser::make_ASSIGN(loc); }
{one_line_comment}+   { /* 忽略, 不做任何操作 */ }

{MUTABLE}         { return pache::parser::make_MUTABLE(loc);}
{VOLATILE}         { return pache::parser::make_VOLATILE(loc);}
"return"        { return pache::parser::make_RETURN(loc); }
"func"          { return pache::parser::make_FUNC(loc); }
{CLASS}                 { return pache::parser::make_CLASS(loc); }

"{"    { return pache::parser::make_LEFT_CURLY_BRACE(loc); }
"("     { return pache::parser::make_LEFT_PARENTHESIS(loc); }
"["   { return pache::parser::make_LEFT_SQUARE_BRACKET(loc); }
"}"     { return pache::parser::make_RIGHT_CURLY_BRACE(loc); }
")"      { return pache::parser::make_RIGHT_PARENTHESIS(loc); }
"]"  { return pache::parser::make_RIGHT_SQUARE_BRACKET(loc); }

{LOOP}                  { return pache::parser::make_LOOP(loc); }
{BREAK}                 { return pache::parser::make_BREAK(loc); }
{CONTINUE}              { return pache::parser::make_CONTINUE(loc); }

"~"   { return pache::parser::make_BITWISE_NOT(loc); }
{WHITESPACE}"&"{WHITESPACE}         { return pache::parser::make_B_AND(loc); }
{WHITESPACE}"|"{WHITESPACE}        { return pache::parser::make_B_XOR(loc); }
{WHITESPACE}"^"{WHITESPACE}        { return pache::parser::make_B_OR(loc); }

"+"                  { return pache::parser::make_PLUS(loc); }
{WHITESPACE}"+"{WHITESPACE}            { return pache::parser::make_BINARY_PLUS(loc); }

"-"              { return pache::parser::make_MINUS(loc); }
{WHITESPACE}"-"{WHITESPACE}            { return pache::parser::make_BINARY_MINUS(loc); }

<INITIAL>"*" { return pache::parser::make_UNARY_STAR(loc); }
{WHITESPACE}"*"{WHITESPACE} {
  return pache::parser::make_BINARY_STAR(loc);
}
{WHITESPACE}"%"{WHITESPACE}               { return pache::parser::make_PERCENT(loc); }
{WHITESPACE}"/"{WHITESPACE}                { return pache::parser::make_SLASH(loc); }
"."                { return pache::parser::make_DOT(loc); }

{WHITESPACE}"<<"{WHITESPACE}            { return pache::parser::make_LEFT_SHITF(loc); }
{WHITESPACE}">>"{WHITESPACE}            { return pache::parser::make_RIGHT_SHIFT(loc); }

{WHITESPACE}"<=>"{WHITESPACE}  { return pache::parser::make_THREE_WAY_COMPARISON(loc); }
{WHITESPACE}"<"{WHITESPACE}           { return pache::parser::make_LESS(loc); }
{WHITESPACE}"<="{WHITESPACE}            { return pache::parser::make_LESS_EQUAL(loc); }
{WHITESPACE}">"{WHITESPACE}             { return pache::parser::make_GREATER(loc); }
{WHITESPACE}">="{WHITESPACE}        { return pache::parser::make_GREATER_EQUAL(loc); }
{WHITESPACE}"="{WHITESPACE}                { return pache::parser::make_EQUAL(loc); }
{WHITESPACE}"!="{WHITESPACE}           { return pache::parser::make_NOT_EQUAL(loc); }

"!"           { return pache::parser::make_LOGICAL_NOT(loc); }
{WHITESPACE}"&&"{WHITESPACE}                   { return pache::parser::make_AND(loc); }
{WHITESPACE}"||"{WHITESPACE}                  { return pache::parser::make_OR(loc); }

","                 { return pache::parser::make_COMMA(loc); }

";"          { 
  //BEGIN(LINE_END);
  return pache::parser::make_SEMICOLON(loc);
}
{IDENTIFIER}   { return pache::parser::make_IDENTIFIER(yytext, loc);}

<BINARY,OCTAL,DECIMAL,HEXADECIMAL>"'" { return pache::parser::make_SINGLE_QUOTE(loc); }

{LOWERCASE_BINARY_PREFIX} {
  BEGIN(BINARY);
  return pache::parser::make_LOWERCASE_BINARY_PREFIX(loc);
}
{UPPERCASE_BINARY_PREFIX} {
  BEGIN(BINARY);
  return pache::parser::make_UPPERCASE_BINARY_PREFIX(loc);
}
<BINARY>[01]+ {
  return pache::parser::make_BINARY_DIGIT(yytext, loc);
}
<BINARY>. { 
  BEGIN(INITIAL);
  yyless(0);
}

<INITIAL>{ZERO} {
  BEGIN(OCTAL);
  return pache::parser::make_ZERO(loc);
}
<OCTAL>[0-7]+ {return pache::parser::make_OCTAL_DIGIT(yytext, loc); }
<OCTAL>. { 
  BEGIN(INITIAL);
  yyless(0);
}

<INITIAL>[1-9] {
  BEGIN(DECIMAL);
  return pache::parser::make_NONZERO_DIGIT(yytext, loc); }
<DECIMAL>[0-9]+ {return pache::parser::make_DIGIT(yytext, loc); }
<DECIMAL>. { 
  BEGIN(INITIAL);
  yyless(0);
}

{LOWERCASE_HEXADECIMAL_PREFIX} {
  BEGIN(HEXADECIMAL);
  return pache::parser::make_LOWERCASE_HEXADECIMAL_PREFIX(loc);
}
{UPPERCASE_HEXADECIMAL_PREFIX} {
  BEGIN(HEXADECIMAL);
  return pache::parser::make_UPPERCASE_HEXADECIMAL_PREFIX(loc);
}
<HEXADECIMAL>[0-9a-fA-F]+ {return pache::parser::make_HEXADECIMAL_DIGIT(yytext, loc); }
<HEXADECIMAL>. {
  BEGIN(INITIAL);
  yyless(0);
}

<<EOF>>  return pache::parser::make_EOF(loc);
%%

void
pache::driver::scan_begin ()
{
  yy_flex_debug = trace_scanning;
  if (file_name.empty () || file_name == "-")
    yyin = stdin;
  else if (!(yyin = fopen (file_name.c_str (), "r")))
    {
      std::cerr << "cannot open " << file_name << ": " << strerror (errno) << '\n';
      exit (EXIT_FAILURE);
    }
}

void
pache::driver::scan_end ()
{
  fclose (yyin);
}
